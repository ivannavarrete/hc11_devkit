0001                         
0002                         ; Setup program for the 68HC11A1 microcontroller.
0003                         ; version: 0.1
0004                         ;
0005                         ; 	description:
0006                         ; The MCU must be placed into bootstrap mode. Then this program is downloaded
0007                         ; to the MCU and placed at address $0000-$00FF. This code *must* be exactly
0008                         ; 256 bytes.
0009                         
0010 0008                    PORTD		equ		$0008
0011 0024                    TMSK2		equ		$0024
0012 002b                    BAUD		equ		$002B
0013 002c                    SCCR1		equ		$002C
0014 002d                    SCCR2		equ		$002D
0015 002e                    SCSR		equ		$002E
0016 002f                    SCDR		equ		$002F
0017 0039                    OPTION		equ		$0039
0018 003b                    PPROG		equ		$003B
0019 003c                    HPRIO		equ		$003C
0020 003d                    INIT		equ		$003D
0021 003f                    CONFIG		equ		$003F
0022                         
0023 e100                    talker_s	equ		$E100		; start offset of talker in page
0024 1ebf                    talker_sz	equ		$1EBF		; talker size
0025 ffbf                    talker_e	equ		$FFBF		; end offset of talker
0026                         
0027                         
0028                         ;		opt l,c
0029                         
0030 0000                    		org $0000
0031 0000 8e 00 f0           start:	lds		#$00F0
0032 0003 ce 10 00           		ldx		#$1000
0033                         
0034                         		; enable/disable bootstrap ROM
0035 0006 12 fc 02 03        next0:	brset	options3 #$02 next1
0036 000a 1d 3c 80           		bclr	HPRIO,X #$80
0037                         		
0038                         		; set IRQ to edge or level sensitivity
0039 000d 13 fd 01 03        next1:	brclr	options2 #$01 next2
0040 0011 1c 39 20           		bset	OPTION,X #$20
0041                         		
0042                         		; enable/disable oscillator startup delay
0043 0014 12 fd 02 03        next2:	brset	options2 #$02 next3
0044 0018 1d 39 10           		bclr	OPTION,X #$10
0045                         		
0046                         		; set the COP timer rate
0047 001b a6 39              next3:	ldaa	OPTION,X
0048 001d ba 00 ff           		ora		options0
0049 0020 a7 39              		staa	OPTION,X
0050                         		
0051                         		; set prescaler rate for free-running timer
0052 0022 a6 24              		ldaa	TMSK2,X
0053 0024 ba 00 fe           		ora		options1
0054 0027 a7 24              		staa	TMSK2,X
0055                         		
0056                         		; Note this ugly hack! We must have the register-remap code at address
0057                         		; $40 or greater, so that we can remap regs to the same page as RAM.
0058                         		; Best thing would be to insert some useful code in here instead.
0059                         		; Also, we *must* remap registers (and everyting else remappable)
0060                         		; before changing MCU mode. MCU mode should be the last environmental
0061                         		; change, after that the upload of int vectors and monitor, and after
0062                         		; that a jump to monitor. Do *not* alter this flow of execution.
0063 0029 7e 00 40           		jmp		$40
0064 0040                    		org	$0040
0065                         		; remap RAM and MCU registers
0066                         		; do it when area at 0-$40 is no longer used and monitor is
0067                         		; not yet downloaded, just in case
0068 0040 b6 00 fb           		ldaa	options4
0069 0043 a7 3d              		staa	INIT,X
0070                         		; point X to registers
0071 0045 b6 00 fb           		ldaa	options4
0072 0048 48                 		lsla
0073 0049 48                 		lsla
0074 004a 48                 		lsla
0075 004b 48                 		lsla
0076 004c 5f                 		clrb
0077 004d 8f                 		xgdx
0078                         
0079                         		; put the MCU into desired mode. Do it befor uploading anything more.
0080 004e 13 fa 01 03        		brclr	options5 #$01 s_chip
0081 0052 1c 3c 20           		bset	HPRIO,X #$20
0082 0055 12 fa 02 03        s_chip:	brset	options5 #$02 smod
0083 0059 1d 3c 40           		bclr	HPRIO,X #$40
0084                         smod:
0085                         
0086                         		; change baud rate to 9600bps
0087 005c 86 30              		ldaa	#$30
0088 005e a7 2b              		staa	BAUD,X
0089                         
0090                         		; set up interrupt vectors at $FFC0-$FFFF
0091                         		; MUST SWITCH TO EXPANDED MODE FIRST, ST00PID!
0092 0060 18 ce ff c0        		ldy		#$FFC0
0093 0064 1c 2d 01           		bset	SCCR2,X #$01	; send break
0094 0067 1e 08 01 fc        		brset	PORTD,X #$01 *	; wait for start bit
0095 006b 1d 2d 01           		bclr	SCCR2,X #$01	; clear break
0096 006e 1f 2e 20 fc        i_recv:	brclr	SCSR,X #$20 *	; wait for byte to arrive
0097 0072 a6 2f              		ldaa	SCDR,X			; read byte
0098 0074 18 a7 00           		staa	0,Y				; store byte
0099                         		;staa	SCDR,X			; echo byte
0100 0077 18 08              		iny
0101 0079 26 f3              		bne		i_recv
0102                         
0103                         		; download talker
0104 007b 18 ce e1 00        		ldy		#talker_s
0105                         		
0106 007f 1c 2d 01           		bset	SCCR2,X #$01	; send break
0107 0082 1e 08 01 fc        		brset	PORTD,X #$01 *
0108 0086 1d 2d 01           		bclr	SCCR2,X #$01	; clear break
0109 0089 1f 2e 20 fc        t_recv:	brclr	SCSR,X #$20 *
0110 008d a6 2f              		ldaa	SCDR,X			; read byte
0111 008f 18 a7 00           		staa	0,Y
0112                         		;staa	SCDR,X			; echo byte
0113 0092 18 08              		iny
0114 0094 18 8c ff bf        		cpy		#talker_e
0115 0098 26 ef              		bne		t_recv
0116                         
0117                         		; pass control to the talker
0118                         		; we must also set Y to point to the right memory page
0119 009a 7e e1 00           		jmp		#talker_s
0120                         
0121                         
0122                         ; Subroutine to delay for 10ms (if E=2Mhz)
0123 009d 18 3c              dly10:	pshy
0124 009f 18 ce 0d 06        		ldy		#$0D06			; 3334*6*500ns = 10ms
0125 00a3 18 09              dloop:	dey
0126                         ;		bne		dloop
0127 00a5 18 38              		puly
0128 00a7 39                 		rts
0129                         
0130                         ; Debug routine. Outputs ones on PORTA. Connect a LED to pin 7 of PORTA and
0131                         ; call this routine. If the LED doesn't lit up, the code is never executed,
0132                         ; which means it crashes somewhere before. Place the call further and further
0133                         ; back to pinpoint the point of failure.
0134 0000                    PORTA	equ		#$0000
0135 0026                    PACTL	equ		#$0026
0136                         ;PORTC	equ		#$0003
0137                         ;DDRC	equ		#$0007
0138                         
0139 00a8 1c 26 80           debug:	bset	PACTL,X #$80
0140 00ab 1c 00 80           		bset	PORTA,X #$80
0141 00ae 20 fe              		bra		*
0142                         		
0143                         
0144 00b0 00 00              talker_end:		fcb 0,0
0145                         
0146                         ; User selected options. Theese are setup by the Control program before this
0147                         ; program is downloaded to the MCU. Use several option bytes to avoid shifting
0148                         ; and ANDing operations in the setup code. Saves time and memory.
0149 00fa                    		org $FA
0150                         
0151                         ; b0	MDA bit (0=single chip mode, 1=expanded mode)
0152                         ; b1	SMOD bit (0=normal mode, 1=special mode)
0153                         ; b2:3	reserved
0154                         ; b4:7	talker page
0155 00fa 00                 options5:	fcb 0
0156                         
0157                         ; b0:3	register page
0158                         ; b4:7	on-chip RAM page
0159 00fb 00                 options4:	fcb 0
0160                         
0161                         ; b0:	on-chip EEPROM at $B600-$B7FF (0=disable, 1=enable)
0162                         ; b1:	on-chip ROM at $E000-$FFFF ??? (0=disable, 1=enable)
0163                         ; b2:7	reserved
0164 00fc 00                 options3:	fcb 0
0165                         
0166                         ; b0:	IRQ pin operation (0=level sensitive, 1=edge sensitive)
0167                         ; b1:	oscillator delay (0=disable, 1=4000 E-clock delay after STOP start-up)
0168                         ; b2:7	reserved
0169 00fd 00                 options2:	fcb 0
0170                         
0171                         ; b0:	timer prescaler select (PR0)
0172                         ; b1:	timer prescaler select (PR1)
0173                         ; b2:7	reserved
0174 00fe 00                 options1:	fcb 0
0175                         
0176                         ; b0:	COP timer rate select (CR0)
0177                         ; b1:	COP timer rate select (CR1)
0178                         ; b2:7	reserved
0179 00ff 00                 options0:	fcb 0
Program + Init Data = 164 bytes
Error count = 0
